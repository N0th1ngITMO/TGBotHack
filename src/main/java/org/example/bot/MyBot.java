package org.example.bot;

import org.example.service.*;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

public class MyBot extends TelegramLongPollingBot {
    private final HuiService huiService = new HuiService();
    private final LinkService linkService = new LinkService();
    private final DBService dbService = new DBService();
    private final AiCheckService aiCheckService = new AiCheckService();
    private final String BOT_USERNAME =
            System.getenv().getOrDefault("BOT_USERNAME", "@gornichnaya_antispam_bot");
    RedisService redisService = new RedisService();
    public MyBot() {
        super("7543300982:AAGV6PNVoE9HWasWz2A6Su9GH_NdGZ10i2U");   // —Ç–æ–∫–µ–Ω —Ç–æ–ª—å–∫–æ –∏–∑ env!
    }

    @Override
    public String getBotUsername() {
        return BOT_USERNAME;
    }

    @Override
    public void onUpdateReceived(Update update) {

        if (!update.hasMessage() || !update.getMessage().hasText()) {
            return;
        }

        Message msg  = update.getMessage();
        Long chatId = msg.getChatId();
        Long userId  = msg.getFrom().getId();
        String text = extractText(msg);
        if (text == null || text.isBlank()) {
            return; // –Ω–∏—á–µ–≥–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
        }

        boolean isBot = BotDetector.isShlyuhobot(text);
        if (isBot){redisService.addInReddis(text);
            try {
                execute(new DeleteMessage(chatId.toString(), msg.getMessageId()));
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }}

        try { // NEW
            huiService.sendText(text)
                    .thenAccept(isCursed -> {
                        if (isCursed == 0) {
                            System.out.println("HUI");
                        } else {
                            try {
                                redisService.addInReddis(text);
                                execute(new DeleteMessage(chatId.toString(), msg.getMessageId()));
                            } catch (TelegramApiException e) {
                                e.printStackTrace();
                            }
                        }
                    })
                    .exceptionally(ex -> {
                        ex.printStackTrace();
                        return null;
                    });
        } catch (Exception e) { // NEW
            e.printStackTrace(); // NEW
        }
        if (text.equals("/start")) {
            String info = """
                –ü—Ä–∏–≤–µ—Ç!
–Ø AI-–≥–æ—Ä–Ω–∏—á–Ω–∞—è –¥–ª—è —Ç–≤–æ–µ–≥–æ —Ç–≥ –∫–∞–Ω–∞–ª–∞ üßπ

–í –º–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤—Ö–æ–¥–∏—Ç:

üßπ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ –æ—á–∏—Å—Ç–∫–∞ —Å–ø–∞–º–∞ —Å –ø–æ–º–æ—â—å—é —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö ml-—Ä–µ—à–µ–Ω–∏–π

üëæ –î–µ—Ç–µ–∫—Ü–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–≥–æ —Å–ø–∞–º–∞ —Å –ø–æ–º–æ—â—å—é LLM –æ—Ç Google

üõ° –ù–∞–¥–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º-–∞—Ç–∞–∫

–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–æ–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏, –Ω—É–∂–Ω–æ:
 - –î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-—á–∞—Ç
 - –í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

–ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞, —Ç–∞–∫ —á—Ç–æ –≤ —á–∞—Ç–µ –Ω–∏–∂–µ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –Ω–µ–º–Ω–æ–≥–æ —Å–ø–∞–º–∞, –∏ —è –ª–æ–≤–∫–æ –µ–≥–æ –ø–æ—á–∏—â—É üòâ
                """;

            SendMessage response = new SendMessage(chatId.toString(), info);
            try {
                execute(response);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
            return;
        }

        if (redisService.isRateLimited(userId, 5, 10)) { // 5 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ 10 —Å–µ–∫—É–Ω–¥
            try {
                execute(new DeleteMessage(chatId.toString(), msg.getMessageId()));
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
            return;
        }

        // --------–ü–†–û–í–ï–†–ö–ò--------- //
        boolean found = redisService.checkExist(text);
        if (found) {
            try {
                execute(new DeleteMessage(chatId.toString(), msg.getMessageId()));
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
            // –≤ –±–¥ –∑–∞–Ω–µ—Å—Ç–∏ –∞–π–¥–∏—à–Ω–∏–∫
        }


//        MessagePayload payload = new MessagePayload(userId, text);
        // —Ä–∞–Ω–¥–æ–º–Ω—ã–π –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –∏ —Ç–∞–∫–∏—Ö –≤—Ç—ã–∫–∞–µ–º —Å–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏–º –≤–∏–¥–∏–º–æ
        // –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞
        if (text.length() > 5) {
            try {
                linkService.sendPayload(text)
                        .thenAccept(isSpam -> {
                            if (isSpam == 1) {
                                System.out.println("–≠—Ç–æ –°–ü–ê–ú.");
                                redisService.addInReddis(text);
                                try {
                                    execute(new DeleteMessage(chatId.toString(), msg.getMessageId()));
                                } catch (TelegramApiException e) {
                                    e.printStackTrace();
                                }
                            } else {
                                System.out.println("–≠—Ç–æ –ù–ï —Å–ø–∞–º.");
                            }
                        })
                        .exceptionally(ex -> {
                            ex.printStackTrace();
                            return null;
                        });
            } catch (Exception e) {
                e.printStackTrace();
            }

            aiCheckService.sendText(text)
                    .thenAccept(isHuman -> {
                        if (isHuman == 1) {
                            System.out.println("–≠—Ç–æ —á–µ–ª–æ–≤–µ–∫!");
                        } else {
                            redisService.addInReddis(text);
                            try {
                                execute(new DeleteMessage(chatId.toString(), msg.getMessageId()));
                            } catch (TelegramApiException e) {
                                e.printStackTrace();
                            }
                        }
                    })
                    .exceptionally(ex -> {
                        ex.printStackTrace();
                        return null;
                    });
        }

        try {
            Double result = dbService.userId(userId).join();

        } catch (Exception e) {
            e.printStackTrace();
        }
//
//        // –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∞–º –ª–∏, –µ—Å–ª–∏ —Å–ø–∞–º —Ç–æ –¥–æ–±–∞–≤—è–ª–µ–º –≤ —Ä–µ–¥–∏—Å
//        if (spamCount == 1){redisService.addInReddis(userId, text);}



        // --------–ü–†–û–í–ï–†–ö–ò--------- //
    }

    private String extractText(Message msg) {
        if (msg.hasText()) {
            return msg.getText();
        } else if (msg.getCaption() != null) {
            return msg.getCaption();
        }
        return null;
    }
}
